import telebot
from telebot.apihelper import ApiTelegramException
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import LabeledPrice
from telebot.types import BotCommand
from dotenv import load_dotenv
import os
import threading
import time
import logging

from utils.Data import ExcelDatabase
from utils.Answer import Message
from utils.Auxilirate import Auxilirate
from utils.XAPI import X3

load_dotenv()
BOT_API=os.getenv("API_KEY")
slon = ExcelDatabase()
x3 = X3()
answer = Message()
help = Auxilirate()
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
bot = telebot.TeleBot(BOT_API)



bot.set_my_commands([
    BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
    BotCommand("buy", "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
    BotCommand("support", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
])



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard(buttons):
    keyboard = InlineKeyboardMarkup()
    
    rows = [
        buttons[:2],   
        buttons[2:4],  
        buttons[4:6],
        buttons[6:]   
    ]
    for row in rows:
        if row:
            keyboard.row(*[InlineKeyboardButton(text=text, callback_data=callback_data) for text, callback_data in row])
    
    return keyboard






@bot.message_handler(commands=['admin'])
def admin(message):
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å tg_id = 958535601
    if str(message.chat.id) != '958535601':
        return

    # –ö–Ω–æ–ø–∫–∞ ¬´–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª
    keyboard = create_inline_keyboard([
        ("üë§–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "menu")
    ])

    # –ë–µ—Ä—ë–º –∏–∑ –ë–î –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    tg_list = slon.get_all_tg_ids()
    for tg in tg_list:
        # –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 3 –¥–Ω–µ–π ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
        if x3.get_time(str(tg)) < 3:
            x3.update_client(3, str(tg))

            try:
                bot.send_message(
                    tg,
                    text=(
                        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåø\n"
                        "–ï—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–∏ –∫ –Ω–∞–º —Å –ò–ò-–ø—Ä–∞–∫—Ç–∏–∫—É–º–∞ ‚Äî —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å.\n\n"
                        "üéÅ–î–∞—Ä–∏–º –µ—â—ë 3 –¥–Ω—è –¥–æ—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Å–≤–æ–∏—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n\n"
                        "–ú—ã –≤–∏–¥–∏–º, –º–Ω–æ–≥–∏–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ VPN ‚Äî –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —ç—Ç–æ —Å–æ–≤—Å–µ–º –ø—Ä–æ—Å—Ç–æ.\n"
                        "–í–æ—Ç –∑–¥–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —Ñ–æ—Ç–æ. –ó–∞–π–º—ë—Ç 2 –º–∏–Ω—É—Ç—ã.\n\n"
                        "iPhone - https://telegra.ph/Vless---iPhoneiPad-03-04-2\n"
                        "Android - https://telegra.ph/Vless---Android-03-04\n\n"
                        "–ß–µ–º –Ω–∞—à –≤–ø–Ω –ª—É—á—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∞—Ä–∞—Ö–ª—è—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n"
                        "1Ô∏è‚É£ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
                        "2Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –º—ã –Ω–µ —ç–∫–æ–Ω–æ–º–∏–º –Ω–∞ –¥–µ—à–µ–≤–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏\n"
                        "3Ô∏è‚É£ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –º–µ–Ω—å—à–µ —á–∞—à–∫–∏ –∫–æ—Ñ–µ, –∞ –æ—Å–≤–æ–∏—Ç—å –ò–ò ‚Äî –±–µ—Å—Ü–µ–Ω–Ω–æüôÇ\n\n"
                        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–ºüí¨"
                    ),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            except ApiTelegramException as e:
                # –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –æ—Ç–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—É—Å=0
                if e.error_code == 403:
                    slon.update_cell(tg, column_index=5, new_value=0)
                    continue
                # –ò–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise







# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    ms = message.from_user
    if slon.find_row_index(ms.id) is None:
        args = help.get_args(message.text.split(maxsplit=1), ms.id) 
        x3.add_connection(3, ms.id, ms.id)
        slon.add_row(ms.username, ms.id, "standart", args, 0)
        keyboard = create_inline_keyboard([("–î–∞–ª–µ–µ", "next")])
        bot.send_message(message.chat.id, text=answer.yep(), reply_markup=keyboard, parse_mode="HTML")
    else:
        link = "..."
        flag = "üî¥ –ö–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        client_time = x3.get_time(str(message.chat.id))
        if client_time > 0:
            link = x3.link(str(message.chat.id))
            flag = "üü¢ –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω"
        keyboard = create_inline_keyboard([
              ("üí≥¬†–ö—É–ø–∏—Ç—å", "buy"),
              ("üìù –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å", "instruction"),
              ("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞", "ref"),
              ("‚ÑπÔ∏è¬†–û –Ω–∞—Å", "About_us"),
              ("üí¨¬†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")
        ])
        text = f""" üßë‚Äçüíª <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

üìÜ –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏:  <b>{client_time}</b>

{flag}

üîë –ö–ª—é—á:
<b><code>{link}</code></b>
"""
    
        bot.send_message(message.chat.id, text=text, reply_markup=keyboard, parse_mode="HTML")





@bot.callback_query_handler(func=lambda call: call.data == "next")
def next(call):
    keyboard = create_inline_keyboard([
        ("–°–æ–≥–ª–∞—Å–µ–Ω", "next2")
        ])

    bot.send_message(call.message.chat.id, text=answer.next1(), reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "next2")
def next2(call):
    keyboard = create_inline_keyboard([
        ("üë§–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "menu")
        ])
    bot.send_message(call.message.chat.id, text=answer.next2(), reply_markup=keyboard, parse_mode="HTML")



@bot.callback_query_handler(func=lambda call: call.data == "menu")
def menu(call):
    if int(slon.get_row(call.message.chat.id)[5]) == 0:
        bot.send_message(call.message.chat.id, text=answer.next3(), parse_mode="HTML")
        slon.update_cell(call.message.chat.id, 5, 1)
    
    link = "..."
    flag = "üî¥ –ö–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    client_time = x3.get_time(str(call.message.chat.id))
    if client_time > 0:
        link = x3.link(str(call.message.chat.id))
        flag = "üü¢ –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω"
    keyboard = create_inline_keyboard([
          ("üí≥¬†–ö—É–ø–∏—Ç—å", "buy"),
          ("üìù –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å", "instruction"),
          ("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞", "ref"),
          ("‚ÑπÔ∏è¬†–û –Ω–∞—Å", "About_us"),
          ("üí¨¬†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")
    ])
    

    text = f""" üßë‚Äçüíª <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

üìÜ –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏:  <b>{client_time}</b>

{flag}

üîë –ö–ª—é—á:
<b><code>{link}</code></b>
"""
    
    bot.send_message(call.message.chat.id, text=text, reply_markup=keyboard, parse_mode="HTML")








@bot.callback_query_handler(func=lambda call: call.data == "ref")
def ref(call):
    bot_username = os.getenv("URL")
    link = f"https://t.me/{bot_username}?start={call.message.chat.id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç (—á—Ç–æ–±—ã –µ—ë –Ω–µ —Å–æ–∫—Ä–∞—â–∞–ª–æ)
    bot.send_message(call.message.chat.id, link)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = create_inline_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")
    ])

    bot.send_message(call.message.chat.id, text=answer.friend_link(), reply_markup=keyboard, parse_mode="HTML")




@bot.callback_query_handler(func=lambda call: call.data == "support")
def support(call):
   keyboard = create_inline_keyboard([
      ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")
   ])
   bot.send_message(chat_id=call.message.chat.id,
                          text=answer.support(), 
                          reply_markup=keyboard,
                          parse_mode="HTML")



@bot.message_handler(commands=["support"])
def support(message):
   keyboard = create_inline_keyboard([
      ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")
   ])
   bot.send_message(chat_id=message.chat.id,
                          text=answer.support(), 
                          reply_markup=keyboard,
                          parse_mode="HTML")















@bot.callback_query_handler(func=lambda call: call.data == "instruction")
def instruction(call):
    keyboard = InlineKeyboardMarkup()
    buttons = [
        ("iPhone & iPad", "https://telegra.ph/Vless---iPhoneiPad-03-04-2"),
        ("Android", "https://telegra.ph/Vless---Android-03-04"),
        ("macOS", "https://telegra.ph/Vless---iPhoneiPad-03-04"),
        ("Windows", "https://telegra.ph/Vless---Windows-03-05")
    ]
    rows = [
        buttons[:2],  
        buttons[2:4],  
        buttons[4:6],  
    ]
    for row in rows:
        keyboard.add(*[InlineKeyboardButton(text, url=url) for text, url in row])
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=keyboard)






@bot.callback_query_handler(func=lambda call: call.data == "About_us")
def About_us(call):
    keyboard = create_inline_keyboard([
       ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")
    ])
    bot.send_message(chat_id=call.message.chat.id, 
                          text=answer.About_us(),
                          reply_markup=keyboard,
                          parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "buy")
def buy(call):
    chat_id = call.message.chat.id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if int(slon.get_row(chat_id)[5]) == 1:
        bot.send_message(chat_id, text=answer.buy(), parse_mode="HTML")
        slon.update_cell(chat_id, 5, 2)

    keyboard = create_inline_keyboard([
        ("‚≠ê1 –º–µ—Å - 100 –∑–≤–µ–∑–¥", "1stars"),
        ("‚≠ê2 –º–µ—Å - 190 –∑–≤–µ–∑–¥", "2stars"),
        ("‚≠ê3 –º–µ—Å - 280 –∑–≤–µ–∑–¥", "3stars"),
        ("‚≠ê6 –º–µ—Å - 550 –∑–≤–µ–∑–¥", "6stars")
    ])
    
    bot.send_message(chat_id=chat_id, 
                     text=answer.about_price(),
                     reply_markup=keyboard)

    keyboard_2 = create_inline_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")
    ])
    
    bot.send_message(chat_id=chat_id, 
                     text=answer.stars_market(),
                     reply_markup=keyboard_2,
                     parse_mode="HTML")
    





@bot.message_handler(commands=["buy"])
def buy(message):
    chat_id = message.chat.id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if int(slon.get_row(chat_id)[5]) == 1:
        bot.send_message(chat_id, text=answer.buy(), parse_mode="HTML")
        slon.update_cell(chat_id, 5, 2)

    keyboard = create_inline_keyboard([
        ("‚≠ê1 –º–µ—Å - 100 –∑–≤–µ–∑–¥", "1stars"),
        ("‚≠ê2 –º–µ—Å - 190 –∑–≤–µ–∑–¥", "2stars"),
        ("‚≠ê3 –º–µ—Å - 280 –∑–≤–µ–∑–¥", "3stars"),
        ("‚≠ê6 –º–µ—Å - 550 –∑–≤–µ–∑–¥", "6stars")
    ])
    
    bot.send_message(chat_id=chat_id, 
                     text=answer.about_price(),
                     reply_markup=keyboard)

    keyboard_2 = create_inline_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")
    ])
    
    bot.send_message(chat_id=chat_id, 
                     text=answer.stars_market(),
                     reply_markup=keyboard_2,
                     parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data in {"1stars", "2stars", "3stars", "6stars"})
def invoice(call):
    
   chat_id = call.message.chat.id
   prices = {
      "1stars": [100, "1 –º–µ—Å—è—Ü", ],
      "2stars": [190, "2 –º–µ—Å—è—Ü–∞"],
      "3stars": [280, "3 –º–µ—Å—è—Ü–∞"],
      "6stars": [550, "6 –º–µ—Å—è—Ü–µ–≤"]
   }
   item = prices.get(call.data)  
   bot.send_invoice(
      chat_id=chat_id,
      title=item[1],
      description="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ " + item[1],
      provider_token="",
      currency="XTR",
      prices= [LabeledPrice(label="subscription", amount=item[0])],
      start_parameter="premium_subscription",
      invoice_payload=str(item[1])
   )



@bot.pre_checkout_query_handler(func=lambda query: True)
def precheckout_handler(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)



@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    invoice_payload = message.successful_payment.invoice_payload
    keyboard = create_inline_keyboard([
      ("üë§–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "menu")
   ])
    ref_id = int(slon.get_row(message.chat.id)[4])
    match invoice_payload:
        case "1 –º–µ—Å—è—Ü":
            if ref_id != 0:
                bot.send_message(ref_id, text = answer.ref_info())
                slon.update_cell(message.chat.id, 4, 0)
                x3.update_client(20, str(ref_id))
            x3.update_client(30, str(message.chat.id))
        case "2 –º–µ—Å—è—Ü–∞":
            if ref_id != 0:
                bot.send_message(ref_id, text = answer.ref_info())
                slon.update_cell(message.chat.id, 4, 0)
                x3.update_client(20, str(ref_id))
            x3.update_client(60, str(message.chat.id))
        case "3 –º–µ—Å—è—Ü–∞":
            if ref_id != 0:
                bot.send_message(ref_id, text = answer.ref_info())
                slon.update_cell(message.chat.id, 4, 0)
                x3.update_client(20, str(ref_id))
            x3.update_client(90, str(message.chat.id))
        case "6 –º–µ—Å—è—Ü–µ–≤":
            if ref_id != 0:
                bot.send_message(ref_id, text = answer.ref_info())
                slon.update_cell(message.chat.id, 4, 0)
                x3.update_client(20, str(ref_id))
            x3.update_client(180, str(message.chat.id))
    bot.send_message(message.chat.id, f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {invoice_payload}", reply_markup=keyboard)


updates = bot.get_updates()
if updates:
    for update in updates:
        bot.process_new_updates([update])



while True:
    try:
        bot.polling(none_stop=True, timeout=60)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
        time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞
